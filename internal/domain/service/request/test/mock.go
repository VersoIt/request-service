// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Ruslan\GolandProjects\request-service\internal\domain\service\request\dependency.go

// Package test is a generated GoMock package.
package test

import (
	model "RequestService/internal/domain/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockrequestRepository is a mock of requestRepository interface.
type MockrequestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockrequestRepositoryMockRecorder
}

// MockrequestRepositoryMockRecorder is the mock recorder for MockrequestRepository.
type MockrequestRepositoryMockRecorder struct {
	mock *MockrequestRepository
}

// NewMockrequestRepository creates a new mock instance.
func NewMockrequestRepository(ctrl *gomock.Controller) *MockrequestRepository {
	mock := &MockrequestRepository{ctrl: ctrl}
	mock.recorder = &MockrequestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrequestRepository) EXPECT() *MockrequestRepositoryMockRecorder {
	return m.recorder
}

// CreateRequest mocks base method.
func (m *MockrequestRepository) CreateRequest(ctx context.Context, request model.Request, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequest", ctx, request, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRequest indicates an expected call of CreateRequest.
func (mr *MockrequestRepositoryMockRecorder) CreateRequest(ctx, request, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequest", reflect.TypeOf((*MockrequestRepository)(nil).CreateRequest), ctx, request, userID)
}

// GetHandlingRequests mocks base method.
func (m *MockrequestRepository) GetHandlingRequests(ctx context.Context, userID int64) (model.Requests, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHandlingRequests", ctx, userID)
	ret0, _ := ret[0].(model.Requests)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHandlingRequests indicates an expected call of GetHandlingRequests.
func (mr *MockrequestRepositoryMockRecorder) GetHandlingRequests(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHandlingRequests", reflect.TypeOf((*MockrequestRepository)(nil).GetHandlingRequests), ctx, userID)
}

// GetRequest mocks base method.
func (m *MockrequestRepository) GetRequest(ctx context.Context, id int64) (model.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest", ctx, id)
	ret0, _ := ret[0].(model.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockrequestRepositoryMockRecorder) GetRequest(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockrequestRepository)(nil).GetRequest), ctx, id)
}

// MockuserRepository is a mock of userRepository interface.
type MockuserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockuserRepositoryMockRecorder
}

// MockuserRepositoryMockRecorder is the mock recorder for MockuserRepository.
type MockuserRepositoryMockRecorder struct {
	mock *MockuserRepository
}

// NewMockuserRepository creates a new mock instance.
func NewMockuserRepository(ctrl *gomock.Controller) *MockuserRepository {
	mock := &MockuserRepository{ctrl: ctrl}
	mock.recorder = &MockuserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserRepository) EXPECT() *MockuserRepositoryMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockuserRepository) GetUser(ctx context.Context, id int64) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockuserRepositoryMockRecorder) GetUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockuserRepository)(nil).GetUser), ctx, id)
}

// LockUser mocks base method.
func (m *MockuserRepository) LockUser(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockUser indicates an expected call of LockUser.
func (mr *MockuserRepositoryMockRecorder) LockUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockUser", reflect.TypeOf((*MockuserRepository)(nil).LockUser), ctx, id)
}
